diff --git a/recognition/include/pcl/recognition/3rdparty/metslib/abstract-search.hh b/recognition/include/pcl/recognition/3rdparty/metslib/abstract-search.hh
index a6c832ebb..b506d7054 100644
--- a/recognition/include/pcl/recognition/3rdparty/metslib/abstract-search.hh
+++ b/recognition/include/pcl/recognition/3rdparty/metslib/abstract-search.hh
@@ -42,7 +42,7 @@ namespace mets {

   /// @brief The solution recorder is used by search algorithm, at the
   /// end of each iteration, to record the best seen solution.
-  ///
+  ///
   /// The concept of best is externalized so that you can record the
   /// best ever solution met or the best solution that matches some
   /// other criteria (e.g. feasibility constraints relaxed in the
@@ -58,7 +58,7 @@ namespace mets {
     solution_recorder& operator=(const solution_recorder&);

     /// @brief A virtual dtor.
-    virtual
+    virtual
     ~solution_recorder();

     /// @brief Accept is called at the end of each iteration for an
@@ -66,10 +66,10 @@ namespace mets {
     ///
     /// (this is a chain of responsibility)
     ///
-    virtual bool
+    virtual bool
     accept(const feasible_solution& sol) = 0;

-    virtual gol_type
+    virtual gol_type
     best_cost() const = 0;
   };

@@ -84,7 +84,7 @@ namespace mets {
     /// metaheuristics.
     ///
     /// @param working The starting point solution (this will be modified
-    /// during search as the working solution)
+    /// during search as the working solution)
     ///
     /// @param recorder A solution recorder instance used to record
     /// the best solution found
@@ -95,27 +95,27 @@ namespace mets {
     abstract_search(feasible_solution& working,
 		    solution_recorder& recorder,
 		    move_manager_type& moveman)
-      : subject<abstract_search<move_manager_type> >(),
+      : subject<abstract_search<move_manager_type> >(),
 	solution_recorder_m(recorder),
 	working_solution_m(working),
 	moves_m(moveman),
 	current_move_m(),
 	step_m()
     { }
-
+
     /// purposely not implemented (see Effective C++)
     abstract_search(const abstract_search<move_manager_type>&);
     /// purposely not implemented (see Effective C++)
     abstract_search& operator==(const abstract_search<move_manager_type>&);

     /// @brief Virtual destructor.
-    virtual
-    ~abstract_search()
+    virtual
+    ~abstract_search()
     { };

     enum {
       /// @brief We just made a move.
-      MOVE_MADE = 0,
+      MOVE_MADE = 0,
       /// @brief Our solution_recorder_chain object reported an improvement
       IMPROVEMENT_MADE,
       /// @brief We are about to start a new iteration
@@ -125,61 +125,60 @@ namespace mets {
       /// @brief Placeholer for next values
       LAST
     };
-
+
     /// @brief This method starts the search.
-    ///
+    ///
     /// Remember that this is a minimization.
     ///
     /// An exception mets::no_moves_error can be risen when no move is
     /// possible.
     virtual void
-    search()
-      throw(no_moves_error) = 0;
+    search() = 0;

     /// @brief The solution recorder instance.
     const solution_recorder&
-    recorder() const
+    recorder() const
     { return solution_recorder_m; };
-
+
     /// @brief The current working solution.
     const feasible_solution&
-    working() const
+    working() const
     { return working_solution_m; }
-
+
     feasible_solution&
-    working()
+    working()
     { return working_solution_m; }

     /// @brief The last move made
     const move&
-    current_move() const
+    current_move() const
     { return **current_move_m; }

     /// @brief The last move made
     move&
-    current_move()
+    current_move()
     { return **current_move_m; }
-
+
     /// @brief The move manager used by this search
-    const move_manager_type&
-    move_manager() const
+    const move_manager_type&
+    move_manager() const
     { return moves_m; }

     /// @brief The move manager used by this search
-    move_manager_type&
-    move_manager()
+    move_manager_type&
+    move_manager()
     { return moves_m; }

     /// @brief The current step of the algorithm (to be used by the
     ///        observers).
-    ///
+    ///
     /// When you implement a new type of search you should set step_m
     /// protected variable to the status of the algorithm
     /// (0 = "MOVE_MADE", 1 = "IMPROVEMENT_MADE", etc.).
     int
-    step() const
+    step() const
     { return step_m; }
-
+
   protected:
     solution_recorder& solution_recorder_m;
     feasible_solution& working_solution_m;
@@ -196,8 +195,8 @@ namespace mets {
   /// @brief The best ever solution recorder can be used as a simple
   /// solution recorder that just records the best copyable solution
   /// found during its lifetime.
-  ///
-  class best_ever_solution : public solution_recorder
+  ///
+  class best_ever_solution : public solution_recorder
   {
   public:
     /// @brief The mets::evaluable_solution will be stored as a
@@ -206,9 +205,9 @@ namespace mets {
     ///
     /// @param best The instance used to store the best solution found
     /// (will be modified).
-    best_ever_solution(evaluable_solution& best) :
-      solution_recorder(),
-      best_ever_m(best)
+    best_ever_solution(evaluable_solution& best) :
+      solution_recorder(),
+      best_ever_m(best)
     { }

     /// @brief Unimplemented default ctor.
@@ -224,17 +223,17 @@ namespace mets {
     bool accept(const feasible_solution& sol);

     /// @brief Returns the best solution found since the beginning.
-    const evaluable_solution& best_seen() const
+    const evaluable_solution& best_seen() const
     { return best_ever_m; }

     /// @brief Best cost seen.
-    gol_type best_cost() const
+    gol_type best_cost() const
     { return best_ever_m.cost_function(); }
   protected:
     /// @brief Records the best solution
     evaluable_solution& best_ever_m;
   };
-
+
   /// @brief An object that is called back during the search progress.
   template<typename move_manager_type>
   class search_listener : public observer<abstract_search<move_manager_type> >
@@ -245,17 +244,17 @@ namespace mets {
     /// to attach the created object to the search process to be
     /// observed (mets::search_type::attach())
     explicit
-    search_listener() : observer<search_type>()
+    search_listener() : observer<search_type>()
     { }

     /// purposely not implemented (see Effective C++)
     search_listener(const search_listener<search_type>& other);
-    search_listener<search_type>&
+    search_listener<search_type>&
     operator=(const search_listener<search_type>& other);

     /// @brief Virtual destructor
-    virtual
-    ~search_listener()
+    virtual
+    ~search_listener()
     { }

     /// @brief This is the callback method called by searches
@@ -269,24 +268,24 @@ namespace mets {
   struct iteration_logger : public mets::search_listener<neighborhood_t>
   {
     explicit
-    iteration_logger(std::ostream& o)
-      : mets::search_listener<neighborhood_t>(),
-	iteration(0),
-	os(o)
+    iteration_logger(std::ostream& o)
+      : mets::search_listener<neighborhood_t>(),
+	iteration(0),
+	os(o)
     { }
-
-    void
-    update(mets::abstract_search<neighborhood_t>* as)
+
+    void
+    update(mets::abstract_search<neighborhood_t>* as)
     {
       const mets::feasible_solution& p = as->working();
       if(as->step() == mets::abstract_search<neighborhood_t>::MOVE_MADE)
 	{
-	  os << iteration++ << "\t"
+	  os << iteration++ << "\t"
 	     << static_cast<const mets::evaluable_solution&>(p).cost_function()
 	     << "\n";
 	}
     }
-
+
   protected:
     int iteration;
     std::ostream& os;
@@ -296,16 +295,16 @@ namespace mets {
   struct improvement_logger : public mets::search_listener<neighborhood_t>
   {
     explicit
-    improvement_logger(std::ostream& o, gol_type epsilon = 1e-7)
-      : mets::search_listener<neighborhood_t>(),
-	iteration_m(0),
+    improvement_logger(std::ostream& o, gol_type epsilon = 1e-7)
+      : mets::search_listener<neighborhood_t>(),
+	iteration_m(0),
 	best_m(std::numeric_limits<double>::max()),
 	os_m(o),
 	epsilon_m(epsilon)
     { }
-
-    void
-    update(mets::abstract_search<neighborhood_t>* as)
+
+    void
+    update(mets::abstract_search<neighborhood_t>* as)
     {
       const mets::feasible_solution& p = as->working();

@@ -314,16 +313,16 @@ namespace mets {
 	  iteration_m++;
 	  double val = static_cast<const mets::evaluable_solution&>(p)
 	    .cost_function();
-	  if(val < best_m - epsilon_m)
-	    {
+	  if(val < best_m - epsilon_m)
+	    {
 	      best_m = val;
-	      os_m << iteration_m << "\t"
+	      os_m << iteration_m << "\t"
 		   << best_m
 		   << " (*)\n";
 	    }
 	}
     }
-
+
   protected:
     int iteration_m;
     double best_m;
@@ -336,7 +335,7 @@ namespace mets {

 }

-inline mets::solution_recorder::~solution_recorder()
+inline mets::solution_recorder::~solution_recorder()
 { }

 inline bool
diff --git a/recognition/include/pcl/recognition/3rdparty/metslib/local-search.hh b/recognition/include/pcl/recognition/3rdparty/metslib/local-search.hh
index 122b30266..0a9674bd1 100644
--- a/recognition/include/pcl/recognition/3rdparty/metslib/local-search.hh
+++ b/recognition/include/pcl/recognition/3rdparty/metslib/local-search.hh
@@ -39,7 +39,7 @@ namespace mets {
   /// @defgroup local_search Local Search
   /// @{

-  /// @brief Local search algorithm.
+  /// @brief Local search algorithm.
   ///
   /// With customary phase alternation
   /// and move managers generated neighborhood this can be used to do
@@ -52,7 +52,7 @@ namespace mets {
     /// @brief Creates a local search instance
     ///
     /// @param working The working solution (this will be modified
-    /// during search)
+    /// during search)
     ///
     /// @param best_so_far A different solution
     /// instance used to store the best solution found
@@ -71,16 +71,15 @@ namespace mets {
     /// purposely not implemented (see Effective C++)
     local_search(const local_search&);
     local_search& operator=(const local_search&);
-
+
     /// @brief This method starts the local search process.
     ///
-    /// To have a real local search you should provide an
+    /// To have a real local search you should provide an
     /// move_manager_type than enumerates all feasible
     /// moves.
     ///
     virtual void
-    search()
-      throw(no_moves_error);
+    search();

   protected:
     bool short_circuit_m;
@@ -88,7 +87,7 @@ namespace mets {
   };

   /// @}
-
+
 }

 template<typename move_manager_t>
@@ -99,22 +98,21 @@ mets::local_search<move_manager_t>::local_search(evaluable_solution& working,
 						 bool short_circuit)
   : abstract_search<move_manager_t>(working, recorder, moveman),
     short_circuit_m(short_circuit), epsilon_m(epsilon)
-{
+{
   typedef abstract_search<move_manager_t> base_t;
-  base_t::step_m = 0;
+  base_t::step_m = 0;
 }

 template<typename move_manager_t>
 void
 mets::local_search<move_manager_t>::search()
-  throw(no_moves_error)
 {
   typedef abstract_search<move_manager_t> base_t;
   typename move_manager_t::iterator best_movit;

   base_t::solution_recorder_m.accept(base_t::working_solution_m);

-  gol_type best_cost =
+  gol_type best_cost =
     static_cast<mets::evaluable_solution&>(base_t::working_solution_m)
     .cost_function();

@@ -134,15 +132,15 @@ mets::local_search<move_manager_t>::search()
 	      if(short_circuit_m) break;
 	    }
 	} // end for each move
-
-      if(best_movit != base_t::moves_m.end())
+
+      if(best_movit != base_t::moves_m.end())
 	{
 	  (*best_movit)->apply(base_t::working_solution_m);
 	  base_t::solution_recorder_m.accept(base_t::working_solution_m);
 	  base_t::current_move_m = best_movit;
 	  this->notify();
 	}
-
+
     } while(best_movit != base_t::moves_m.end());
 }
 #endif
diff --git a/recognition/include/pcl/recognition/3rdparty/metslib/simulated-annealing.hh b/recognition/include/pcl/recognition/3rdparty/metslib/simulated-annealing.hh
index 18a2c6c59..96ab2d8f2 100644
--- a/recognition/include/pcl/recognition/3rdparty/metslib/simulated-annealing.hh
+++ b/recognition/include/pcl/recognition/3rdparty/metslib/simulated-annealing.hh
@@ -44,18 +44,18 @@ namespace mets {
   /// @see mets::simulated_annealing
   ///
   /// An abstract annealing schedule. Implementations
-  /// should decide the new temperature every time the
+  /// should decide the new temperature every time the
   /// subscript operator is called (every search iteration)
   class abstract_cooling_schedule
   {
   public:
     /// @brief Constructor
-    abstract_cooling_schedule()
+    abstract_cooling_schedule()
     { }

     /// @brief Virtual destructor
     virtual
-    ~abstract_cooling_schedule()
+    ~abstract_cooling_schedule()
     { }

     /// @brief The function that updates the SA temperature.
@@ -110,19 +110,18 @@ namespace mets {
 			double starting_temp,
 			double stop_temp = 1e-7,
 			double K = 1.0);
-
+
     /// purposely not implemented (see Effective C++)
     simulated_annealing(const simulated_annealing&);
     simulated_annealing& operator=(const simulated_annealing&);
-
+
     /// @brief This method starts the simulated annealing search
     /// process.
     ///
     /// Remember that this is a minimization process.
     ///
     virtual void
-    search()
-      throw(no_moves_error);
+    search();

     void setApplyAndEvaluate(bool b) {
       apply_and_evaluate = b;
@@ -131,14 +130,14 @@ namespace mets {
     /// @brief The current annealing temperature.
     ///
     /// @return The current temperature of the algorithm.
-    double
-    current_temp() const
+    double
+    current_temp() const
     { return current_temp_m; }

     /// @brief The annealing schedule instance.
     ///
     /// @return The cooling schedule used by this search process.
-    const abstract_cooling_schedule&
+    const abstract_cooling_schedule&
     cooling_schedule() const
     { return cooling_schedule_m; }

@@ -166,14 +165,14 @@ namespace mets {

     bool apply_and_evaluate;
   };
-
+
   /// @brief Original ECS proposed by Kirkpatrick
   class exponential_cooling
     : public abstract_cooling_schedule
   {
   public:
     exponential_cooling(double alpha = 0.95)
-      : abstract_cooling_schedule(), factor_m(alpha)
+      : abstract_cooling_schedule(), factor_m(alpha)
     { if(alpha >= 1) throw std::runtime_error("alpha must be < 1"); }
     double
     operator()(double temp, feasible_solution& /*fs*/)
@@ -207,7 +206,7 @@ simulated_annealing(evaluable_solution& working,
 		    move_manager_t& moveman,
 		    termination_criteria_chain& tc,
 		    abstract_cooling_schedule& cs,
-		    double starting_temp,
+		    double starting_temp,
 		    double stop_temp,
 		    double K)
   : abstract_search<move_manager_t>(working, recorder, moveman),
@@ -215,21 +214,20 @@ simulated_annealing(evaluable_solution& working,
     starting_temp_m(starting_temp), stop_temp_m(stop_temp),
     current_temp_m(), K_m(K),
     ureal(0.0,1.0), rng(), gen(rng, ureal), apply_and_evaluate(false)
-{
+{
 }

 template<typename move_manager_t>
 void
 mets::simulated_annealing<move_manager_t>::search()
-  throw(no_moves_error)
 {
   typedef abstract_search<move_manager_t> base_t;

   current_temp_m = starting_temp_m;
-  while(!termination_criteria_m(base_t::working_solution_m)
+  while(!termination_criteria_m(base_t::working_solution_m)
         && current_temp_m > stop_temp_m)
     {
-      gol_type actual_cost =
+      gol_type actual_cost =
 	static_cast<mets::evaluable_solution&>(base_t::working_solution_m)
 	.cost_function();
       /*gol_type best_cost =
@@ -237,7 +235,7 @@ mets::simulated_annealing<move_manager_t>::search()
 	.cost_function();*/

       base_t::moves_m.refresh(base_t::working_solution_m);
-      for(typename move_manager_t::iterator movit = base_t::moves_m.begin();
+      for(typename move_manager_t::iterator movit = base_t::moves_m.begin();
           movit != base_t::moves_m.end(); ++movit)
       {
         // apply move and record proposed cost function
@@ -271,8 +269,8 @@ mets::simulated_annealing<move_manager_t>::search()
           (*movit)->unapply(base_t::working_solution_m);
         }
       } // end for each move
-
-      current_temp_m =
+
+      current_temp_m =
       cooling_schedule_m(current_temp_m, base_t::working_solution_m);
     }
 }
diff --git a/recognition/include/pcl/recognition/3rdparty/metslib/tabu-search.hh b/recognition/include/pcl/recognition/3rdparty/metslib/tabu-search.hh
index a32524783..1ff9cd4fb 100644
--- a/recognition/include/pcl/recognition/3rdparty/metslib/tabu-search.hh
+++ b/recognition/include/pcl/recognition/3rdparty/metslib/tabu-search.hh
@@ -44,7 +44,7 @@ namespace mets {
   ///
   /// An aspiration criteria is a criteria used
   /// to override the tabu list. When the aspiration
-  /// criteria is met a move is made even if it's in
+  /// criteria is met a move is made even if it's in
   /// the tabu-list
   ///
   /// Aspiration critera can be chained so a criteria can decorate
@@ -53,27 +53,27 @@ namespace mets {
   {
   public:
     /// @brief Constructor.
-    ///
+    ///
     /// @param next Optional next criteria in the chain.
     explicit
     aspiration_criteria_chain(aspiration_criteria_chain *next = 0)
-      : next_m(next)
+      : next_m(next)
     { }
-
+
     /// purposely not implemented (see Effective C++)
     aspiration_criteria_chain(const aspiration_criteria_chain& other);
     /// purposely not implemented (see Effective C++)
-    aspiration_criteria_chain&
+    aspiration_criteria_chain&
     operator=(const aspiration_criteria_chain& other);

     /// @brief Virtual destructor.
-    virtual
-    ~aspiration_criteria_chain()
-    { }
+    virtual
+    ~aspiration_criteria_chain()
+    { }

     /// @brief A method to reset this aspiration criteria chain to its
     /// original state.
-    virtual void
+    virtual void
     reset();

     /// @brief This is a callback function from the algorithm that
@@ -86,24 +86,24 @@ namespace mets {
     /// @param fs The current working solution (after applying move).
     /// @param mov The accepted move (the move just made).
     /// @return True if the move is to be accepted.
-    virtual void
+    virtual void
     accept(feasible_solution& fs, move& mov, gol_type evaluation);
-
+
     /// @brief The function that decides if we shoud accept a tabu move
     ///
     /// @param fs The current working solution (before applying move).
     /// @param mov The move to be made (the move that is being evaluated).
     /// @return True if the move is to be accepted.
-    virtual bool
+    virtual bool
     operator()(feasible_solution& fs, move& mov, gol_type evaluation) const;
-
+
   protected:
     aspiration_criteria_chain* next_m;
   };

   ///
   /// @brief An abstract tabu list
-  ///
+  ///
   /// This is chainable so that tabu lists can be decorated with
   /// other tabu lists.
   class tabu_list_chain
@@ -117,25 +117,25 @@ namespace mets {

     /// Create an abstract tabu list with a certain tenure
     explicit
-    tabu_list_chain(unsigned int tenure)
-      : next_m(0), tenure_m(tenure)
+    tabu_list_chain(unsigned int tenure)
+      : next_m(0), tenure_m(tenure)
     { }

     /// @brief Create an abstract tabu list with a certain tenure and
     /// a chained tabu list that decorates this one
-    tabu_list_chain(tabu_list_chain* next, unsigned int tenure)
-      : next_m(next), tenure_m(tenure)
+    tabu_list_chain(tabu_list_chain* next, unsigned int tenure)
+      : next_m(next), tenure_m(tenure)
     { }

     /// @brief Virtual destructor
-    virtual
-    ~tabu_list_chain()
-    { }
+    virtual
+    ~tabu_list_chain()
+    { }

     ///
     /// @brief Make a move tabu when starting from a certain solution.
-    ///
-    /// Different implementation can remember "tenure" moves,
+    ///
+    /// Different implementation can remember "tenure" moves,
     /// "tenure" solutions or some other peculiar fact that
     /// will avoid cycling.
     ///
@@ -144,14 +144,14 @@ namespace mets {
     ///
     /// @param sol The current working solution
     /// @param mov The move to make tabu
-    virtual void
+    virtual void
     tabu(feasible_solution& sol, move& mov) = 0;

     /// @brief True if the move is tabu for the given solution.
     ///
-    /// Different implementation can remember "tenure" moves,
+    /// Different implementation can remember "tenure" moves,
     /// "tenure" solutions or some other peculiar fact that
-    /// will avoid cycling. So it's not defined at this stage
+    /// will avoid cycling. So it's not defined at this stage
     /// if a move will be tabu or not at a certain state of the
     /// search: this depends on the implementation.
     ///
@@ -160,7 +160,7 @@ namespace mets {
     ///
     /// @param sol The current working solution
     /// @param mov The move to make tabu
-    virtual bool
+    virtual bool
     is_tabu(feasible_solution& sol, move& mov) const = 0;

     ///
@@ -179,21 +179,21 @@ namespace mets {
     /// @param tenure: the new tenure of the list.
     ///
     virtual void
-    tenure(unsigned int tenure)
+    tenure(unsigned int tenure)
     { tenure_m = tenure; }

   protected:
     tabu_list_chain* next_m;
     unsigned int tenure_m;
   };
-
+
   ///
   /// @brief Tabu Search algorithm.
   ///
   /// This implements decorator pattern. You can build many
   /// different solvers decorating tabu_search class in different
   /// ways.
-  ///
+  ///
   template<typename move_manager_type>
   class tabu_search : public abstract_search<move_manager_type>
   {
@@ -221,8 +221,8 @@ namespace mets {
     /// Annealing: you can give a termination criteria that termiantes
     /// when temperature reaches 0.
     ///
-    tabu_search(feasible_solution& starting_solution,
-		solution_recorder& best_recorder,
+    tabu_search(feasible_solution& starting_solution,
+		solution_recorder& best_recorder,
 		move_manager_type& move_manager_inst,
 		tabu_list_chain& tabus,
 		aspiration_criteria_chain& aspiration,
@@ -231,34 +231,33 @@ namespace mets {
     tabu_search(const search_type&);
     search_type& operator=(const search_type&);

-    virtual
+    virtual
     ~tabu_search() {}

     /// @brief This method starts the tabu search process.
-    ///
+    ///
     /// Remember that this is a minimization process.
     ///
     /// An exception mets::no_moves_error is risen when no move
     /// is possible.
-    void
-    search()
-      throw(no_moves_error);
-
+    void
+    search();
+
     enum {
       ASPIRATION_CRITERIA_MET = abstract_search<move_manager_type>::LAST,
       LAST
     };

     /// @brief The tabu list used by this tabu search
-    const tabu_list_chain&
+    const tabu_list_chain&
     get_tabu_list() const { return tabu_list_m; }
-
+
     /// @brief The aspiration criteria used by this tabu search
-    const aspiration_criteria_chain&
+    const aspiration_criteria_chain&
     get_aspiration_criteria() const { return aspiration_criteria_m; }

     /// @brief The termination criteria used by this tabu search
-    const termination_criteria_chain&
+    const termination_criteria_chain&
     get_termination_criteria() const { return termination_criteria_m; }
   protected:
     tabu_list_chain& tabu_list_m;
@@ -277,34 +276,34 @@ namespace mets {
   /// The comparison between moves is demanded to the
   /// move implementation.
   ///
-  /// A mets::mana_move is tabu if it's in the tabu list by means
+  /// A mets::mana_move is tabu if it's in the tabu list by means
   /// of its operator== and hash function.
-  class simple_tabu_list
+  class simple_tabu_list
     : public tabu_list_chain
   {
   public:
     /// @brief Ctor. Makes a tabu list of the specified tenure.
     ///
     /// @param tenure Tenure (length) of the tabu list
-    simple_tabu_list(unsigned int tenure)
-      : tabu_list_chain(tenure),
-	tabu_moves_m(),
+    simple_tabu_list(unsigned int tenure)
+      : tabu_list_chain(tenure),
+	tabu_moves_m(),
 	tabu_hash_m(tenure) {}

     /// @brief Ctor. Makes a tabu list of the specified tenure.
     ///
     /// @param tenure Tenure (length) of the tabu list
     /// @param next Next list to invoke when this returns false
-    simple_tabu_list(tabu_list_chain* next, unsigned int tenure)
-      : tabu_list_chain(next, tenure),
-	tabu_moves_m(),
+    simple_tabu_list(tabu_list_chain* next, unsigned int tenure)
+      : tabu_list_chain(next, tenure),
+	tabu_moves_m(),
 	tabu_hash_m(tenure) {}

     /// @brief Destructor
     ~simple_tabu_list();

     /// @brief Make move a tabu.
-    ///
+    ///
     /// This implementation simply remembers "tenure" moves.
     ///
     /// @param sol The current working solution
@@ -336,15 +335,15 @@ namespace mets {
     typedef std::unordered_map<
       mana_move*, // Key type
       int, //insert a move and the number of times it's present in the list
-      mana_move_hash,
+      mana_move_hash,
       dereferenced_equal_to<mana_move*> > move_map_type;
 #else
     typedef std::tr1::unordered_map<
       mana_move*, // Key type
       int, //insert a move and the number of times it's present in the list
-      mana_move_hash,
+      mana_move_hash,
       dereferenced_equal_to<mana_move*> > move_map_type;
-#endif
+#endif
     move_list_type tabu_moves_m;
     move_map_type tabu_hash_m;
   };
@@ -365,34 +364,34 @@ namespace mets {
     explicit
     best_ever_criteria(aspiration_criteria_chain* next,
 		       double min_improvement = 1e-6);
-
-    void
+
+    void
     reset();

     void
     accept(feasible_solution& fs, move& mov, gol_type evaluation);

-    bool
+    bool
     operator()(feasible_solution& fs, move& mov, gol_type evaluation) const;

   protected:
     gol_type best_m;
     gol_type tolerance_m;
   };
-
+
   /// @}
 }

 template<typename move_manager_t>
 mets::tabu_search<move_manager_t>::
-tabu_search (feasible_solution& starting_solution,
-	     solution_recorder& best_recorder,
+tabu_search (feasible_solution& starting_solution,
+	     solution_recorder& best_recorder,
 	     move_manager_t& move_manager_inst,
 	     tabu_list_chain& tabus,
 	     aspiration_criteria_chain& aspiration,
 	     termination_criteria_chain& termination)
-  : abstract_search<move_manager_t>(starting_solution,
-				    best_recorder,
+  : abstract_search<move_manager_t>(starting_solution,
+				    best_recorder,
 				    move_manager_inst),
     tabu_list_m(tabus),
     aspiration_criteria_m(aspiration),
@@ -401,7 +400,6 @@ tabu_search (feasible_solution& starting_solution,

 template<typename move_manager_t>
 void mets::tabu_search<move_manager_t>::search()
-  throw(no_moves_error)
 {
   typedef abstract_search<move_manager_t> base_t;
   while(!termination_criteria_m(base_t::working_solution_m))
@@ -411,36 +409,36 @@ void mets::tabu_search<move_manager_t>::search()
       this->notify();

       base_t::moves_m.refresh(base_t::working_solution_m);
-
-      typename move_manager_t::iterator best_movit = base_t::moves_m.end();
+
+      typename move_manager_t::iterator best_movit = base_t::moves_m.end();
       gol_type best_move_cost = std::numeric_limits<gol_type>::max();
-
-      for(typename move_manager_t::iterator movit = base_t::moves_m.begin();
+
+      for(typename move_manager_t::iterator movit = base_t::moves_m.begin();
 	  movit != base_t::moves_m.end(); ++movit)
 	{
 	  // evaluate proposed move
 	  gol_type cost = (*movit)->evaluate(base_t::working_solution_m);
-
+
 	  // save tabu status
-	  bool is_tabu = tabu_list_m.is_tabu(base_t::working_solution_m,
+	  bool is_tabu = tabu_list_m.is_tabu(base_t::working_solution_m,
 						 **movit);

 	  // for each non-tabu move record the best one
 	  if(cost < best_move_cost)
 	    {
-
+
 	      bool aspiration_criteria_met = false;
-
+
 	      // not interesting if this is not a tabu move (and if we
 	      // are not improving over other moves)
-	      if(is_tabu)
+	      if(is_tabu)
 		{
-		  aspiration_criteria_met =
-		    aspiration_criteria_m(base_t::working_solution_m,
+		  aspiration_criteria_met =
+		    aspiration_criteria_m(base_t::working_solution_m,
 					  **movit,
 					  cost);
 		}
-
+
 	      if(!is_tabu || aspiration_criteria_met)
 		{
 		  best_move_cost = cost;
@@ -453,7 +451,7 @@ void mets::tabu_search<move_manager_t>::search()
 		}
 	    }
 	} // end for each move
-
+
       if(best_movit == base_t::moves_m.end())
 	throw no_moves_error();

@@ -467,11 +465,11 @@ void mets::tabu_search<move_manager_t>::search()
       // call listeners
       base_t::step_m = base_t::MOVE_MADE;
       this->notify();
-
-      aspiration_criteria_m.accept(base_t::working_solution_m,
-				   **best_movit,
+
+      aspiration_criteria_m.accept(base_t::working_solution_m,
+				   **best_movit,
 				   best_move_cost);
-
+
       if(base_t::solution_recorder_m.accept(base_t::working_solution_m))
 	{
 	  base_t::step_m = base_t::IMPROVEMENT_MADE;
@@ -481,7 +479,7 @@ void mets::tabu_search<move_manager_t>::search()
       // call listeners
       base_t::step_m = base_t::ITERATION_END;
       this->notify();
-
+
     } // end while(!termination)
 }

@@ -497,15 +495,15 @@ mets::tabu_list_chain::tabu(feasible_solution& sol, /* const */ move& mov)
 inline bool
 mets::tabu_list_chain::is_tabu(feasible_solution& sol, /* const */ move& mov) const
 {
-  if(next_m)
+  if(next_m)
     return next_m->is_tabu(sol, mov);
-  else
+  else
     return false;
 }

 inline mets::simple_tabu_list::~simple_tabu_list()
-{
-  for(move_map_type::iterator m = tabu_hash_m.begin();
+{
+  for(move_map_type::iterator m = tabu_hash_m.begin();
       m!=tabu_hash_m.end(); ++m)
     delete m->first;
 }
@@ -513,16 +511,16 @@ inline mets::simple_tabu_list::~simple_tabu_list()
 inline void
 mets::simple_tabu_list::tabu(feasible_solution& sol, /* const */ move& mov)
 {
-  mana_move* mc =
+  mana_move* mc =
     dynamic_cast<mana_move&>(mov).opposite_of();

   // This does nothing if the move was already tabu (can happen when
   // aspiration criteria is met).
-  std::pair<move_map_type::iterator, bool>
+  std::pair<move_map_type::iterator, bool>
     insert_result = tabu_hash_m.insert(std::make_pair(mc, 1));

   // If it was already in the map, increase the counter
-  if(!insert_result.second)
+  if(!insert_result.second)
     {
       insert_result.first->second++;
       delete mc;
@@ -531,7 +529,7 @@ mets::simple_tabu_list::tabu(feasible_solution& sol, /* const */ move& mov)
   // Always add the move at the end of the list (when aspiration
   // criteria is met a move can be present more than one time in this
   // list: this is correct, so the last made move is always the last
-  // in the queue).
+  // in the queue).
   tabu_moves_m.push_back(mc);

   // Since we use the hash size, the tenure is the number of different
@@ -543,7 +541,7 @@ mets::simple_tabu_list::tabu(feasible_solution& sol, /* const */ move& mov)
       move_map_type::iterator elem = tabu_hash_m.find
 	(dynamic_cast<mana_move*>(tabu_moves_m.front()));
       elem->second--;
-      if(elem->second == 0)
+      if(elem->second == 0)
 	{
 	  mana_move* tmp = elem->first;
 	  tabu_hash_m.erase(elem);
@@ -559,7 +557,7 @@ mets::simple_tabu_list::is_tabu(feasible_solution& sol, move& mov) const
 {
   // hash set. very fast but requires C++ ISO TR1 extension
   // and an hash function in every move (Omega(1)).
-  bool tabu = (tabu_hash_m.find(&dynamic_cast<mana_move&>(mov))
+  bool tabu = (tabu_hash_m.find(&dynamic_cast<mana_move&>(mov))
 	       != tabu_hash_m.end());

   if(tabu)
@@ -570,23 +568,23 @@ mets::simple_tabu_list::is_tabu(feasible_solution& sol, move& mov) const

 //////////////////////////////////////////////////////////////////////////
 // aspiration_criteria_chain
-inline void
+inline void
 mets::aspiration_criteria_chain::reset()
 {
   if(next_m)
     return next_m->reset();
 }

-inline void
-mets::aspiration_criteria_chain::accept(feasible_solution& fs,
+inline void
+mets::aspiration_criteria_chain::accept(feasible_solution& fs,
 					move& mov,
 					gol_type eval)
 {
   if(next_m) next_m->accept(fs, mov, eval);
 }

-inline bool
-mets::aspiration_criteria_chain::operator()(feasible_solution& fs,
+inline bool
+mets::aspiration_criteria_chain::operator()(feasible_solution& fs,
 					    move& mov,
 					    gol_type eval) const
 {
@@ -598,19 +596,19 @@ mets::aspiration_criteria_chain::operator()(feasible_solution& fs,

 //////////////////////////////////////////////////////////////////////////
 // best_ever_criteria
-inline mets::best_ever_criteria::best_ever_criteria(double tolerance)
+inline mets::best_ever_criteria::best_ever_criteria(double tolerance)
   : aspiration_criteria_chain(),
     best_m(std::numeric_limits<gol_type>::max()),
     tolerance_m(tolerance)
 { }

-inline mets::best_ever_criteria::best_ever_criteria(aspiration_criteria_chain* next, double tolerance)
+inline mets::best_ever_criteria::best_ever_criteria(aspiration_criteria_chain* next, double tolerance)
   : aspiration_criteria_chain(next),
     best_m(std::numeric_limits<gol_type>::max()),
     tolerance_m(tolerance)
 { }
-
-inline void
+
+inline void
 mets::best_ever_criteria::reset()
 {
   best_m = std::numeric_limits<mets::gol_type>::max();
@@ -618,24 +616,24 @@ mets::best_ever_criteria::reset()
 }

 inline void
-mets::best_ever_criteria::accept(feasible_solution& fs,
-				 move& mov,
-				 gol_type eval)
+mets::best_ever_criteria::accept(feasible_solution& fs,
+				 move& mov,
+				 gol_type eval)
 {
   best_m = std::min(dynamic_cast<const evaluable_solution&>(fs).cost_function(), best_m);
   aspiration_criteria_chain::accept(fs, mov, eval);
-}
+}

-inline bool
-mets::best_ever_criteria::operator()(feasible_solution& fs,
-				     move& mov,
+inline bool
+mets::best_ever_criteria::operator()(feasible_solution& fs,
+				     move& mov,
 				     gol_type eval) const
-{
+{
   /// the solution is the solution before applying mov.
   if(eval < best_m - tolerance_m)
     return true;
   else
-    return aspiration_criteria_chain::operator()(fs, mov, eval);
+    return aspiration_criteria_chain::operator()(fs, mov, eval);
 }

 #endif
