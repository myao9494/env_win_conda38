"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const application_1 = require("@jupyterlab/application");
const apputils_1 = require("@jupyterlab/apputils");
const dashboard_1 = require("./dashboard");
require("../style/index.css");
const COMMAND_ID = 'bokeh-server:launch-document';
/**
 * Initialization data for the jupyterlab-nvdashboard extension.
 */
const extension = {
    id: 'jupyterlab-nvdashboard',
    autoStart: true,
    requires: [application_1.ILabShell],
    optional: [application_1.ILayoutRestorer],
    activate: (app, labShell, restorer) => {
        const sidebar = new dashboard_1.BokehDashboardLauncher({
            launchItem: (item) => {
                app.commands.execute(COMMAND_ID, item);
            }
        });
        sidebar.id = 'nvdashboard-launcher';
        sidebar.title.iconClass = 'jp-GPU-icon jp-SideBar-tabIcon';
        sidebar.title.caption = 'System Dashboards';
        labShell.add(sidebar, 'left');
        // An instance tracker which is used for state restoration.
        const tracker = new apputils_1.WidgetTracker({
            namespace: 'nvdashboard-launcher'
        });
        app.commands.addCommand(COMMAND_ID, {
            label: 'Open Bokeh document',
            execute: args => {
                const item = args;
                // If we already have a dashboard open to this url, activate it
                // but don't create a duplicate.
                const w = tracker.find(w => {
                    return !!(w && w.item && w.item.route === item.route);
                });
                if (w) {
                    if (!w.isAttached) {
                        labShell.add(w, 'main');
                    }
                    labShell.activateById(w.id);
                    return;
                }
                const widget = new dashboard_1.BokehDashboard();
                widget.title.label = item.label;
                widget.title.icon = 'jp-GPU-icon';
                widget.item = item;
                labShell.add(widget, 'main');
                tracker.add(widget);
            }
        });
        if (restorer) {
            // Add state restoration for the dashboard items.
            restorer.add(sidebar, sidebar.id);
            restorer.restore(tracker, {
                command: COMMAND_ID,
                args: widget => widget.item || {},
                name: widget => (widget.item && widget.item.route) || ''
            });
        }
        labShell.add(sidebar, 'left', { rank: 200 });
    }
};
exports.default = extension;
