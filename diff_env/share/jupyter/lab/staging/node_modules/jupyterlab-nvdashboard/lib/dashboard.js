"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const apputils_1 = require("@jupyterlab/apputils");
const coreutils_1 = require("@jupyterlab/coreutils");
const services_1 = require("@jupyterlab/services");
const coreutils_2 = require("@lumino/coreutils");
const widgets_1 = require("@lumino/widgets");
const React = require("react");
const ReactDOM = require("react-dom");
/**
 * A class for hosting a Bokeh dashboard in an iframe.
 */
class BokehDashboard extends apputils_1.MainAreaWidget {
    /**
     * Construct a new dashboard widget.
     */
    constructor() {
        super({
            content: new apputils_1.IFrame({ sandbox: ['allow-scripts', 'allow-same-origin'] })
        });
        this._item = null;
        this._inactivePanel = Private.createInactivePanel();
        this.content.node.appendChild(this._inactivePanel);
        this.update();
    }
    /**
     * The current dashboard item for the widget.
     */
    get item() {
        return this._item;
    }
    set item(value) {
        if (coreutils_2.JSONExt.deepEqual(value, this._item)) {
            return;
        }
        this._item = value;
        this.update();
    }
    /**
     * Handle an update request to the dashboard panel.
     */
    onUpdateRequest() {
        // If there is nothing to show, empty the iframe URL and
        // show the inactive panel.
        if (!this.item) {
            this.content.url = '';
            this._inactivePanel.style.display = '';
            return;
        }
        // Make sure the inactive panel is hidden
        this._inactivePanel.style.display = 'none';
        this.content.url = coreutils_1.URLExt.join(services_1.ServerConnection.makeSettings({}).baseUrl, '/nvdashboard', this.item.route);
    }
}
exports.BokehDashboard = BokehDashboard;
/**
 * A widget for hosting Bokeh dashboard launchers.
 */
class BokehDashboardLauncher extends widgets_1.Widget {
    /**
     * Create a new Bokeh sidebar.
     */
    constructor(options) {
        super();
        this._items = [];
        let layout = (this.layout = new widgets_1.PanelLayout());
        this._dashboard = new widgets_1.Widget();
        const header = new widgets_1.Widget();
        header.node.textContent = 'GPU Dashboards';
        header.addClass('bokeh-BokehDashboardLauncher-header');
        layout.addWidget(header);
        layout.addWidget(this._dashboard);
        this.addClass('bokeh-BokehDashboardLauncher');
        this._launchItem = options.launchItem;
        this._connection = services_1.ServerConnection.makeSettings({});
        services_1.ServerConnection.makeRequest(coreutils_1.URLExt.join(this._connection.baseUrl, '/nvdashboard/index.json'), {}, this._connection).then(response => {
            response.json().then((data) => {
                this._items = [];
                Object.keys(data).forEach(route => {
                    this._items.push({ label: data[route], route });
                });
                this.update();
            });
        });
    }
    /**
     * The list of dashboard items which can be launched.
     */
    get items() {
        return this._items;
    }
    /**
     * Handle an update request.
     */
    onUpdateRequest(msg) {
        // Don't bother if the sidebar is not visible
        if (!this.isVisible) {
            return;
        }
        ReactDOM.render(React.createElement(DashboardListing, { launchItem: this._launchItem, items: this._items }), this._dashboard.node);
    }
    /**
     * Rerender after showing.
     */
    onAfterShow(msg) {
        this.update();
    }
}
exports.BokehDashboardLauncher = BokehDashboardLauncher;
/**
 * A React component for a launcher button listing.
 */
function DashboardListing(props) {
    let listing = props.items.map(item => {
        return (React.createElement("li", { className: "nvdashboardListing-item", key: item.route },
            React.createElement("button", { className: "jp-mod-styled jp-mod-accept", value: item.label, onClick: () => props.launchItem(item) }, item.label)));
    });
    // Return the JSX component.
    return (React.createElement("div", null,
        React.createElement("ul", { className: "nvdashboardListing-list" }, listing)));
}
/**
 * A namespace for private functionality.
 */
var Private;
(function (Private) {
    function createInactivePanel() {
        const panel = document.createElement('div');
        panel.className = 'bokeh-BokehDashboard-inactive';
        return panel;
    }
    Private.createInactivePanel = createInactivePanel;
})(Private || (Private = {}));
